name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
      branches: [ "master" ]
      
jobs:

  test:
    runs-on: ubuntu-latest
    steps:

    - name: Check out repository code
      uses: actions/checkout@v4
  
    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
          
    - name: Build jar and Test
      run : |
        mvn -B -DskipTests clean package
        mvn test

        #TODO: check if it fails the pipeline


  build:
    runs-on: ubuntu-latest
    steps:

      - name: Increment version
        run: |
          # Get base version from pom.xml file (usually 1.0.0)
          base_version=$(grep -o '<version>.*</version>' pom.xml | head -n1 | sed 's/<[^>]*>//g')
          
          # Set the patch number to be the github actions run number
          patch_number=${{ github.run_number }}

          # Set new version to be the base + patch
          new_version=$(echo $base_version | awk -F. '{$NF = $NF + $patch_number;} 1' | sed 's/ /./g')

          # Store the version in environment variable
          echo "VERSION=$new_version" >> $GITHUB_ENV

          
      - name: Build Docker Image
        uses: actions/checkout@v4
      - run: |
          echo "The new version is ${{ env.VERSION }}"
          docker build --file ./docker/dockerfile --tag ${{ vars.DOCKER_USER }}/${{ vars.DOCKER_REPO }}:${{ env.VERSION }} .
    
  deliver:
      runs-on: ubuntu-latest
      steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
            
      - name: Push to DockerHub
        run: docker push ${{ vars.DOCKER_USER }}/${{ vars.DOCKER_REPO }}
    
      
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest

    # steps:
    # - name: Deploy Frontend
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.HOST_FRONTEND }}
    #     username: ${{ secrets.HOST_FRONTEND_USER }}
    #     key: ${{ secrets.PRIVATE_KEY }}
    #     port: ${{ secrets.PORT }}
    #     script_stop: true
    #     script: |
    #     sudo docker stop ${{ secrets.DOCKER_CLIENT_CONTAINER }}
    #     sudo docker rm ${{ secrets.DOCKER_CLIENT_CONTAINER }}
    #     sudo docker rmi ${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_CLIENT_REPO }}
    #     sudo docker pull ${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_CLIENT_REPO }}
    #     sudo docker compose --file /opt/${{ secrets.APP_NAME }}/docker/docker-compose-client.yml --project-directory /opt/${{ secrets.APP_NAME }} up --detach
